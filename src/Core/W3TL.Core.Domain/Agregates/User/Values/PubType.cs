using System.Text.RegularExpressions;
using ViaEventAssociation.Core.Domain.Common.Bases;

namespace ViaEventAssociation.Core.Domain.Common.Values;

/**
 * Represents a public key within the system, encapsulating the logic
 * for validation and instantiation to ensure adherence to expected formats
 * and standards, particularly those used by the NaCl library for encryption.
 */
public class PubType : ValueObject {
    /**
     * Private constructor to ensure instantiation through the Create method
     * after ensuring the public key meets the required validation criteria.
     *
     * @param value The validated public key as a string.
     */
    private PubType(string? value) {
        this.Value = value;
    }

    public string? Value { get; }

    /**
     * Attempts to create a PubType instance from a string representing the public key,
     * validating it against expected formats for NaCl library-generated keys.
     *
     * @param publicKey The public key string to validate and use for instantiation.
     * @returns A Result containing either a PubType instance or an error, based on validation outcome.
     */
    public static Result<PubType> Create(string? publicKey) {
        var validation = Validate(publicKey);
        if (validation.IsSuccess)
            return new PubType(publicKey);
        return validation.Error;
    }

    /**
     * Validates a public key string against specific criteria, including length
     * and character composition, to align with keys generated by the NaCl library.
     *
     * @param publicKey The public key string to validate.
     * @returns A Result indicating the validation outcome.
     */
    private static Result Validate(string? publicKey) {
        if (string.IsNullOrWhiteSpace(publicKey))
            return Error.BlankPublicKey;

        // NaCl public keys, when base64 encoded, are typically 44 characters including padding.
        // This regex validates a base64 encoded string of that length.
        if (!Regex.IsMatch(publicKey, @"^[a-zA-Z0-9\+/]{43}=$"))
            return Error.InvalidPublicKeyFormat;

        return Result.Success();
    }

    /**
     * Provides components for equality comparison between instances of PubType,
     * primarily based on the public key value.
     *
     * @returns An enumerable of objects used in equality comparison.
     */
    protected override IEnumerable<object?> GetEqualityComponents() {
        yield return Value;
    }
}